// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for LibSQL
class LibSQLBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LibSQLBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LibSQLBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int libsql_sync(
    libsql_database_t db,
    ffi.Pointer<ffi.Pointer<ffi.Char>> out_err_msg,
  ) {
    return _libsql_sync(
      db,
      out_err_msg,
    );
  }

  late final _libsql_syncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(libsql_database_t,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('libsql_sync');
  late final _libsql_sync = _libsql_syncPtr.asFunction<
      int Function(libsql_database_t, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int libsql_open_sync(
    ffi.Pointer<ffi.Char> db_path,
    ffi.Pointer<ffi.Char> primary_url,
    ffi.Pointer<ffi.Char> auth_token,
    ffi.Pointer<libsql_database_t> out_db,
    ffi.Pointer<ffi.Pointer<ffi.Char>> out_err_msg,
  ) {
    return _libsql_open_sync(
      db_path,
      primary_url,
      auth_token,
      out_db,
      out_err_msg,
    );
  }

  late final _libsql_open_syncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<libsql_database_t>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('libsql_open_sync');
  late final _libsql_open_sync = _libsql_open_syncPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<libsql_database_t>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int libsql_open_ext(
    ffi.Pointer<ffi.Char> url,
    ffi.Pointer<libsql_database_t> out_db,
    ffi.Pointer<ffi.Pointer<ffi.Char>> out_err_msg,
  ) {
    return _libsql_open_ext(
      url,
      out_db,
      out_err_msg,
    );
  }

  late final _libsql_open_extPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<libsql_database_t>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('libsql_open_ext');
  late final _libsql_open_ext = _libsql_open_extPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<libsql_database_t>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  void libsql_close(
    libsql_database_t db,
  ) {
    return _libsql_close(
      db,
    );
  }

  late final _libsql_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(libsql_database_t)>>(
          'libsql_close');
  late final _libsql_close =
      _libsql_closePtr.asFunction<void Function(libsql_database_t)>();

  int libsql_connect(
    libsql_database_t db,
    ffi.Pointer<libsql_connection_t> out_conn,
    ffi.Pointer<ffi.Pointer<ffi.Char>> out_err_msg,
  ) {
    return _libsql_connect(
      db,
      out_conn,
      out_err_msg,
    );
  }

  late final _libsql_connectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(libsql_database_t, ffi.Pointer<libsql_connection_t>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('libsql_connect');
  late final _libsql_connect = _libsql_connectPtr.asFunction<
      int Function(libsql_database_t, ffi.Pointer<libsql_connection_t>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  void libsql_disconnect(
    libsql_connection_t conn,
  ) {
    return _libsql_disconnect(
      conn,
    );
  }

  late final _libsql_disconnectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(libsql_connection_t)>>(
          'libsql_disconnect');
  late final _libsql_disconnect =
      _libsql_disconnectPtr.asFunction<void Function(libsql_connection_t)>();

  int libsql_execute(
    libsql_connection_t conn,
    ffi.Pointer<ffi.Char> sql,
    ffi.Pointer<libsql_rows_t> out_rows,
    ffi.Pointer<ffi.Pointer<ffi.Char>> out_err_msg,
  ) {
    return _libsql_execute(
      conn,
      sql,
      out_rows,
      out_err_msg,
    );
  }

  late final _libsql_executePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              libsql_connection_t,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<libsql_rows_t>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('libsql_execute');
  late final _libsql_execute = _libsql_executePtr.asFunction<
      int Function(libsql_connection_t, ffi.Pointer<ffi.Char>,
          ffi.Pointer<libsql_rows_t>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  void libsql_free_rows(
    libsql_rows_t res,
  ) {
    return _libsql_free_rows(
      res,
    );
  }

  late final _libsql_free_rowsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(libsql_rows_t)>>(
          'libsql_free_rows');
  late final _libsql_free_rows =
      _libsql_free_rowsPtr.asFunction<void Function(libsql_rows_t)>();

  void libsql_free_rows_future(
    libsql_rows_future_t res,
  ) {
    return _libsql_free_rows_future(
      res,
    );
  }

  late final _libsql_free_rows_futurePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(libsql_rows_future_t)>>(
          'libsql_free_rows_future');
  late final _libsql_free_rows_future = _libsql_free_rows_futurePtr
      .asFunction<void Function(libsql_rows_future_t)>();

  void libsql_wait_result(
    libsql_rows_future_t res,
  ) {
    return _libsql_wait_result(
      res,
    );
  }

  late final _libsql_wait_resultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(libsql_rows_future_t)>>(
          'libsql_wait_result');
  late final _libsql_wait_result =
      _libsql_wait_resultPtr.asFunction<void Function(libsql_rows_future_t)>();

  int libsql_column_count(
    libsql_rows_t res,
  ) {
    return _libsql_column_count(
      res,
    );
  }

  late final _libsql_column_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(libsql_rows_t)>>(
          'libsql_column_count');
  late final _libsql_column_count =
      _libsql_column_countPtr.asFunction<int Function(libsql_rows_t)>();

  int libsql_column_name(
    libsql_rows_t res,
    int col,
    ffi.Pointer<ffi.Pointer<ffi.Char>> out_name,
    ffi.Pointer<ffi.Pointer<ffi.Char>> out_err_msg,
  ) {
    return _libsql_column_name(
      res,
      col,
      out_name,
      out_err_msg,
    );
  }

  late final _libsql_column_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              libsql_rows_t,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('libsql_column_name');
  late final _libsql_column_name = _libsql_column_namePtr.asFunction<
      int Function(libsql_rows_t, int, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int libsql_column_type(
    libsql_rows_t res,
    int col,
    ffi.Pointer<ffi.Int> out_type,
    ffi.Pointer<ffi.Pointer<ffi.Char>> out_err_msg,
  ) {
    return _libsql_column_type(
      res,
      col,
      out_type,
      out_err_msg,
    );
  }

  late final _libsql_column_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(libsql_rows_t, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('libsql_column_type');
  late final _libsql_column_type = _libsql_column_typePtr.asFunction<
      int Function(libsql_rows_t, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int libsql_next_row(
    libsql_rows_t res,
    ffi.Pointer<libsql_row_t> out_row,
    ffi.Pointer<ffi.Pointer<ffi.Char>> out_err_msg,
  ) {
    return _libsql_next_row(
      res,
      out_row,
      out_err_msg,
    );
  }

  late final _libsql_next_rowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(libsql_rows_t, ffi.Pointer<libsql_row_t>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('libsql_next_row');
  late final _libsql_next_row = _libsql_next_rowPtr.asFunction<
      int Function(libsql_rows_t, ffi.Pointer<libsql_row_t>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  void libsql_free_row(
    libsql_row_t res,
  ) {
    return _libsql_free_row(
      res,
    );
  }

  late final _libsql_free_rowPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(libsql_row_t)>>(
          'libsql_free_row');
  late final _libsql_free_row =
      _libsql_free_rowPtr.asFunction<void Function(libsql_row_t)>();

  int libsql_get_string(
    libsql_row_t res,
    int col,
    ffi.Pointer<ffi.Pointer<ffi.Char>> out_value,
    ffi.Pointer<ffi.Pointer<ffi.Char>> out_err_msg,
  ) {
    return _libsql_get_string(
      res,
      col,
      out_value,
      out_err_msg,
    );
  }

  late final _libsql_get_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              libsql_row_t,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('libsql_get_string');
  late final _libsql_get_string = _libsql_get_stringPtr.asFunction<
      int Function(libsql_row_t, int, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  void libsql_free_string(
    ffi.Pointer<ffi.Char> ptr,
  ) {
    return _libsql_free_string(
      ptr,
    );
  }

  late final _libsql_free_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'libsql_free_string');
  late final _libsql_free_string =
      _libsql_free_stringPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int libsql_get_int(
    libsql_row_t res,
    int col,
    ffi.Pointer<ffi.LongLong> out_value,
    ffi.Pointer<ffi.Pointer<ffi.Char>> out_err_msg,
  ) {
    return _libsql_get_int(
      res,
      col,
      out_value,
      out_err_msg,
    );
  }

  late final _libsql_get_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(libsql_row_t, ffi.Int, ffi.Pointer<ffi.LongLong>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('libsql_get_int');
  late final _libsql_get_int = _libsql_get_intPtr.asFunction<
      int Function(libsql_row_t, int, ffi.Pointer<ffi.LongLong>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int libsql_get_float(
    libsql_row_t res,
    int col,
    ffi.Pointer<ffi.Double> out_value,
    ffi.Pointer<ffi.Pointer<ffi.Char>> out_err_msg,
  ) {
    return _libsql_get_float(
      res,
      col,
      out_value,
      out_err_msg,
    );
  }

  late final _libsql_get_floatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(libsql_row_t, ffi.Int, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('libsql_get_float');
  late final _libsql_get_float = _libsql_get_floatPtr.asFunction<
      int Function(libsql_row_t, int, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int libsql_get_blob(
    libsql_row_t res,
    int col,
    ffi.Pointer<blob> out_blob,
    ffi.Pointer<ffi.Pointer<ffi.Char>> out_err_msg,
  ) {
    return _libsql_get_blob(
      res,
      col,
      out_blob,
      out_err_msg,
    );
  }

  late final _libsql_get_blobPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(libsql_row_t, ffi.Int, ffi.Pointer<blob>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('libsql_get_blob');
  late final _libsql_get_blob = _libsql_get_blobPtr.asFunction<
      int Function(libsql_row_t, int, ffi.Pointer<blob>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  void libsql_free_blob(
    blob b,
  ) {
    return _libsql_free_blob(
      b,
    );
  }

  late final _libsql_free_blobPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(blob)>>('libsql_free_blob');
  late final _libsql_free_blob =
      _libsql_free_blobPtr.asFunction<void Function(blob)>();
}

final class __fsid_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int> __val;
}

final class libsql_connection extends ffi.Opaque {}

final class libsql_database extends ffi.Opaque {}

final class libsql_row extends ffi.Opaque {}

final class libsql_rows extends ffi.Opaque {}

final class libsql_rows_future extends ffi.Opaque {}

final class blob extends ffi.Struct {
  external ffi.Pointer<ffi.Char> ptr;

  @ffi.Int()
  external int len;
}

typedef libsql_database_t = ffi.Pointer<libsql_database>;
typedef libsql_connection_t = ffi.Pointer<libsql_connection>;
typedef libsql_rows_t = ffi.Pointer<libsql_rows>;
typedef libsql_rows_future_t = ffi.Pointer<libsql_rows_future>;
typedef libsql_row_t = ffi.Pointer<libsql_row>;

const int _STDINT_H = 1;

const int _FEATURES_H = 1;

const int _DEFAULT_SOURCE = 1;

const int __GLIBC_USE_ISOC2X = 1;

const int __USE_ISOC11 = 1;

const int __USE_ISOC99 = 1;

const int __USE_ISOC95 = 1;

const int _POSIX_SOURCE = 1;

const int _POSIX_C_SOURCE = 200809;

const int __USE_POSIX = 1;

const int __USE_POSIX2 = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int _ATFILE_SOURCE = 1;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __SYSCALL_WORDSIZE = 64;

const int __TIMESIZE = 64;

const int __USE_MISC = 1;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int _STDC_PREDEF_H = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_60559_BFP__ = 201404;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_IEC_60559_COMPLEX__ = 201404;

const int __STDC_ISO_10646__ = 201706;

const int __GNU_LIBRARY__ = 6;

const int __GLIBC__ = 2;

const int __GLIBC_MINOR__ = 35;

const int _SYS_CDEFS_H = 1;

const int __THROW = 1;

const int __THROWNL = 1;

const int __glibc_c99_flexarr_available = 1;

const int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = 0;

const int __HAVE_GENERIC_SELECTION = 0;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int _BITS_TYPES_H = 1;

const int _BITS_TYPESIZES_H = 1;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __INO_T_MATCHES_INO64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = 1;

const int __FD_SETSIZE = 1024;

const int _BITS_TIME64_H = 1;

const int _BITS_WCHAR_H = 1;

const int __WCHAR_MAX = 2147483647;

const int __WCHAR_MIN = -2147483648;

const int _BITS_STDINT_INTN_H = 1;

const int _BITS_STDINT_UINTN_H = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIZE_MAX = -1;

const int WCHAR_MIN = -2147483648;

const int WCHAR_MAX = 2147483647;

const int WINT_MIN = 0;

const int WINT_MAX = 4294967295;
